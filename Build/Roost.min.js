"use strict";(function(){var build,collect,compile,destination,exec,fs,literate,minify,name,order,preamble,prefix,stitch,suffix;fs=require("fs");var _require=require("child_process");exec=_require.exec,literate=!(destination="dist/"),name="index",order=[],preamble=null,prefix="src/",suffix=".coffee",exports.configure=function(){var options=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};if(null!=options)return null!=options.destination&&(destination="".concat(options.destination)),null!=options.literate&&(literate=!!options.literate),options.name&&(name="".concat(options.name)),options.order&&(order=[].concat(options.order)),void 0!==options.preamble&&(preamble=null!=options.preamble?"".concat(options.preamble):null),options.prefix&&(prefix="".concat(options.prefix)),options.suffix?suffix="".concat(options.suffix):void 0},collect=function(){return function(callback){var contents,i,index,len,remaining;for(console.log("Collecting source files…"),contents=new Array(remaining=order.length),index=i=0,len=order.length;i<len;index=++i)!function(file,index){fs.readFile("".concat(prefix).concat(file).concat(suffix),"utf8",function(error,result){if(error)throw error;if(contents[index]=result,!--remaining)return callback(contents)})}(order[index],index)}},stitch=function(collector){return function(callback){return collector(function(contents){var stitched;console.log("Stitching…"),stitched=contents.join(literate?"\n".concat(Array(72).join("_"),"\n\n"):"\n#  ".concat(Array(66).join("_"),"  #\n\n")),fs.mkdir(destination,function(error){var output;if(error&&"EEXIST"!==error.code)throw error;return output="".concat(destination).concat(name,".").concat(literate?"lit":"","coffee"),fs.writeFile(output,stitched,"utf-8",function(error){if(error)throw error;return callback(output)})})})}},compile=function(stitcher){return function(callback){return stitcher(function(stitched){var compiled;console.log("Compiling…"),compiled=stitched.replace(/\.(?:lit)?coffee$/i,".js"),exec(null!=preamble?"./node_modules/.bin/coffee -cpt ".concat(stitched," | cat ").concat(preamble," - > ").concat(compiled):"coffee -cpt ".concat(stitched," > ").concat(compiled),function(error,stdout,stderr){if(error)throw error;if(!stdout&&!stderr)return callback(compiled);console.log((stdout||"")+(stderr||""))})})}},minify=function(compiler){return compiler(function(compiled){var minified;console.log("Minifying…"),minified=compiled.replace(/\.js$/,".min.js"),exec(null!=preamble?"./node_modules/.bin/uglifyjs ".concat(compiled," -c | cat ").concat(preamble," - > ").concat(minified):"./node_modules/.bin/uglifyjs ".concat(compiled," -c > ").concat(minified),function(error,stdout,stderr){if(error)throw error;if(!stdout&&!stderr)return console.log("…Done.");console.log((stdout||"")+(stderr||""))})})},exports.build=build=function(){return minify(compile(stitch(collect())))},exports.watch=function(){var file,i,len,results;for(build(),results=[],i=0,len=order.length;i<len;i++)file=order[i],results.push(function(file){return fs.watch("".concat(prefix).concat(file).concat(suffix),"utf8",function(type){if("change"===type)return console.log("File `".concat(file,"` changed, rebuilding...")),build()})}(file));return results},exports.clear=function(){var base;return base="".concat(destination).concat(name),fs.unlink("".concat(base,".").concat(literate?"lit":"","coffee"),function(){}),fs.unlink("".concat(base,".js"),function(){}),fs.unlink("".concat(base,".min.js"),function(){})}}).call(void 0);
